// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  nationalId String   @unique
  name       String
  email      String   @unique
  phone      String?
  role       UserRole @default(PARENT)
  username   String   @unique
  password   String
  status     UserStatus @default(ACTIVE)
  lastLoginAt  DateTime?
  lastLogoutAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  
  parent     Parent?
  supervisor Supervisor?
  credentials Credential[]

  @@map("users")
  @@index([role], name: "idx_users_role")
  @@index([email], name: "idx_users_email")
  @@index([status], name: "idx_users_status")
  @@index([nationalId], name: "idx_users_national_id")
}

model Parent {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]

  @@map("parents")
}

model Supervisor {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  homeAddress   String?
  homeLatitude  Float?
  homeLongitude Float?
  bus           Bus?

  @@map("supervisors")
}

enum UserRole {
  ADMIN
  PARENT
  SUPERVISOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Credential {
  id        String   @id @default(uuid())
  userId    String
  username  String
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
  @@index([userId], name: "idx_credentials_user")
  @@index([isActive], name: "idx_credentials_active")
}

model BlackListedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("black_listed_tokens")
  @@index([token], name: "idx_black_listed_tokens_token")
  @@index([expiresAt], name: "idx_black_listed_tokens_expires_at")
}


model Student {
  id          String        @id @default(uuid())
  nationalId  String        @unique
  name        String
  grade       String
  homeAddress String?
  homeLatitude  Float?
  homeLongitude Float?


  parentId String
  parent   Parent   @relation(fields: [parentId], references: [userId], onDelete: Cascade)
  busId    String?
  bus      Bus?     @relation(fields: [busId], references: [id], onDelete: SetNull) // SetNull is safer here
  
  status      StudentStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("students")
  @@index([parentId], name: "idx_students_parent")
  @@index([busId], name: "idx_students_bus")
  @@index([status], name: "idx_students_status")
  @@index([nationalId], name: "idx_students_national_id")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
}

model Bus {
  id                  String     @id @default(uuid())
  busNumber           String     @unique // The internal, friendly fleet number (e.g., "Bus 7")
  licensePlate        String?    @unique // The official government-issued license plate (e.g., "9879 اب")
  capacity            Int
  model               String?
  year                Int?
  driverName          String?
  driverPhone         String?
  driverLicenseNumber String?

  status    BusStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  supervisorId String?     @unique
  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id], onDelete: SetNull) // SetNull is safer
  students     Student[]

  @@map("buses")
  @@index([supervisorId], name: "idx_buses_supervisor")
  @@index([status], name: "idx_buses_status")
}

enum BusStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}