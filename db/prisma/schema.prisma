// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id         String   @id @default(uuid())
  nationalId String   @unique
  name       String
  email      String   @unique
  phone      String?
  role       UserRole @default(PARENT)
  username   String   @unique
  password   String
  status     UserStatus @default(ACTIVE)
  lastLoginAt  DateTime?
  lastLogoutAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  
  parent     Parent?
  supervisor Supervisor?
  credentials Credential[]

  // New relations for messaging
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("users")
  @@index([role], name: "idx_users_role")
  @@index([email], name: "idx_users_email")
  @@index([status], name: "idx_users_status")
  @@index([nationalId], name: "idx_users_national_id")
}

model Parent {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
  homeAddress   String?
  homeLatitude  Float?
  homeLongitude Float?
  fcmToken      String?

  @@map("parents")
}

model Supervisor {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  homeAddress   String?
  homeLatitude  Float?
  homeLongitude Float?
  bus           Bus?

  @@map("supervisors")
}

enum UserRole {
  ADMIN
  PARENT
  SUPERVISOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Credential {
  id        String   @id @default(uuid())
  userId    String
  username  String
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
  @@index([userId], name: "idx_credentials_user")
  @@index([isActive], name: "idx_credentials_active")
}

model BlackListedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("black_listed_tokens")
  @@index([token], name: "idx_black_listed_tokens_token")
  @@index([expiresAt], name: "idx_black_listed_tokens_expires_at")
}


model Student {
  id          String        @id @default(uuid())
  nationalId  String        @unique
  name        String
  grade       String
  homeAddress String?
  homeLatitude  Float?
  homeLongitude Float?


  parentId String
  parent   Parent   @relation(fields: [parentId], references: [userId], onDelete: Cascade)
  busId    String?
  bus      Bus?     @relation(fields: [busId], references: [id], onDelete: SetNull) // SetNull is safer here
  
  status      StudentStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  absences    Absence[]
  permissions Permission[]

  @@map("students")
  @@index([parentId], name: "idx_students_parent")
  @@index([busId], name: "idx_students_bus")
  @@index([status], name: "idx_students_status")
  @@index([nationalId], name: "idx_students_national_id")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
}

model Bus {
  id                  String     @id @default(uuid())
  busNumber           String     @unique // The internal, friendly fleet number (e.g., "Bus 7")
  licensePlate        String?    @unique // The official government-issued license plate (e.g., "9879 اب")
  capacity            Int
  model               String?
  year                Int?
  driverName          String?
  driverPhone         String?
  driverLicenseNumber String?

  status    BusStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  supervisorId String?     @unique // References User.id via Supervisor.userId - use main User.id when setting this field
  supervisor   Supervisor? @relation(fields: [supervisorId], references: [userId], onDelete: SetNull) // SetNull is safer
  students     Student[]
  locationLogs LocationLog[] // Add this line to link to the new model
  
  // New relation
  trips       Trip[]

  @@map("buses")
  @@index([supervisorId], name: "idx_buses_supervisor")
  @@index([status], name: "idx_buses_status")
}

enum BusStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

model LocationLog {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  bus       Bus      @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId     String
  
  // New relation for trip tracking
  tripId    String?
  trip      Trip?    @relation(fields: [tripId], references: [id], onDelete: SetNull)

  @@map("location_logs")
  @@index([busId], name: "idx_location_logs_bus")
  @@index([timestamp], name: "idx_location_logs_timestamp")
  @@index([tripId], name: "idx_location_logs_trip")
}

// New models for enhanced Smart Bus features

model Absence {
  id         String      @id @default(uuid())
  studentId  String
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reportedBy String
  reportedAt DateTime    @default(now())
  startDate  DateTime
  endDate    DateTime
  reason     String?
  type       AbsenceType
  status     AbsenceStatus @default(PENDING)
  approvedBy String?    //userId of supervisor who approved/rejected
  approvedAt DateTime?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("absences")
}

enum AbsenceType {
  SICK 
  PERSONAL
  SCHOOL_EVENT
  OTHER
}

enum AbsenceStatus {
  PENDING
  APPROVED
  REJECTED
}

model Permission {
  id        String           @id @default(uuid())
  studentId String
  type      PermissionType
  date      DateTime
  reason    String?
  status    PermissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("permissions")
  @@index([studentId], name: "idx_permissions_student")
  @@index([date], name: "idx_permissions_date")
  @@index([status], name: "idx_permissions_status")
  @@index([type], name: "idx_permissions_type")
}

enum PermissionType {
  ARRIVAL  // Parent will take child to school
  EXIT     // Parent will pick up child from school
}

enum PermissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Message {
  id         String      @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([senderId], name: "idx_messages_sender")
  @@index([receiverId], name: "idx_messages_receiver")
  @@index([isRead], name: "idx_messages_read")
  @@index([createdAt], name: "idx_messages_created")
}

enum MessageType {
  TEXT
  IMAGE
  LOCATION
  SYSTEM
}

model Trip {
  id          String    @id @default(uuid())
  busId       String
  type        TripType
  startTime   DateTime?
  endTime     DateTime?
  status      TripStatus @default(SCHEDULED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  bus         Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
  locations   LocationLog[]

  @@map("trips")
  @@index([busId], name: "idx_trips_bus")
  @@index([type], name: "idx_trips_type")
  @@index([status], name: "idx_trips_status")
  @@index([startTime], name: "idx_trips_start_time")
}

enum TripType {
  MORNING   // School pickup
  AFTERNOON // School return
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}