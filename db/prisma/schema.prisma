// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// USER MANAGEMENT
// ========================================

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  role      UserRole @default(PARENT)
  username  String   @unique // Auto-generated
  password  String   // Encrypted password
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  students    Student[]    // Parent -> Students
  buses       Bus[]        // Supervisor -> Buses
  credentials Credential[] // User -> Credentials

  @@map("users")
  @@index([role], name: "idx_users_role")
  @@index([email], name: "idx_users_email")
  @@index([status], name: "idx_users_status")
}

enum UserRole {
  ADMIN
  PARENT
  SUPERVISOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

// ========================================
// STUDENT MANAGEMENT
// ========================================

model Student {
  id       String        @id @default(uuid())
  name     String
  parentId String
  busId    String
  status   StudentStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relationships
  parent User  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  bus    Bus   @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@map("students")
  @@index([parentId], name: "idx_students_parent")
  @@index([busId], name: "idx_students_bus")
  @@index([status], name: "idx_students_status")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
}

// ========================================
// BUS MANAGEMENT
// ========================================

model Bus {
  id           String     @id @default(uuid())
  name         String     @unique
  supervisorId String?
  capacity     Int        @default(20)
  status       BusStatus  @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relationships
  supervisor User?     @relation(fields: [supervisorId], references: [id], onDelete: SetNull)
  students   Student[]

  @@map("buses")
  @@index([supervisorId], name: "idx_buses_supervisor")
  @@index([status], name: "idx_buses_status")
}

enum BusStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// ========================================
// CREDENTIAL MANAGEMENT
// ========================================

model Credential {
  id         String   @id @default(uuid())
  userId     String
  username   String
  password   String   // Encrypted password for admin retrieval
  isActive   Boolean  @default(true)
  generatedAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
  @@index([userId], name: "idx_credentials_user")
  @@index([isActive], name: "idx_credentials_active")
}

model BlackListedToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("black_listed_tokens")
  @@index([token], name: "idx_black_listed_tokens_token")
  @@index([expiresAt], name: "idx_black_listed_tokens_expires_at")
}